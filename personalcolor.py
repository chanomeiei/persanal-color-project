import streamlit as st
import cv2
import numpy as np
from sklearn.cluster import KMeans
from scipy.spatial import distance
import time
from streamlit_lottie import st_lottie
import requests

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô Lottie
def load_lottie_url(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û
def extract_dominant_color(image, k=4):
    try:
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = image.reshape((-1, 3))  # Flatten the image to a 2D array (each pixel as a row)

        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(image)

        colors = kmeans.cluster_centers_.astype(int)
        return colors[0]  # Return the most frequent color
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {str(e)}")
        return None

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• RGB ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Personal Color
personal_colors = {
    'Spring': [(253, 213, 177), (255, 224, 181), (255, 212, 160), (244, 168, 131)],
    'Summer': [(240, 196, 179), (232, 177, 167), (244, 228, 214), (220, 196, 187)],
    'Autumn': [(219, 171, 128), (214, 150, 110), (225, 167, 128), (201, 135, 94)],
    'Winter': [(238, 217, 215), (219, 202, 197), (193, 175, 169), (156, 132, 128)]
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Personal Color ‡πÉ‡∏î
def classify_seasonal_color(color):
    if color is None:
        return 'Cannot be verified'

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏¢‡∏∏‡∏Ñ‡∏•‡∏¥‡∏î (Euclidean distance) ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Personal Color
    distances = {}
    for season, colors in personal_colors.items():
        distances[season] = min([distance.euclidean(color, c) for c in colors])

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Personal Color ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    season = min(distances, key=distances.get)
    return season

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
def outfit_suggestion(season):
    suggestions = {
        'Spring': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏™‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏∏‡∏Ñ‡∏™‡∏î‡πÉ‡∏™‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏õ‡∏£‡∏µ‡πâ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡∏£‡πà‡∏≤',
        'Summer': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏á‡∏ö',
        'Autumn': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏∏‡∏Ñ‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô',
        'Winter': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏î‡∏™‡∏µ‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á',
    }
    return suggestions.get(season, '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
def color_suggestions_for_season(season):
    seasonal_colors = {
        'Spring': ['#fce300', '#ffb81c', '#a6631b', '#c4d600', '#74aa50', '#009f4d',
                   '#2dccd3', '#9595d2', '#963cbd', '#ec5037', '#ff8200', '#ffa38b'],
        'Summer': ['#f395c7', '#f57eb6', '#c964cf', '#00a376', '#71c5e8', '#00a9e0',
                   '#0077c8', '#93328e', '#ab145a', '#bc0f3f', '#484a51', '#003057'],
        'Autumn': ['#ffcd00', '#b89d18', '#8f993e', '#5e7e29', '#a6631b', '#9d4815',
                   '#7c4d3a', '#9a3324', '#ec5037', '#ef7200', '#00bfb3', '#00778b'],
        'Winter': ['#fefefe', '#99d6ea', '#f395c7', '#f8e59a', '#00a3e1', '#0057b8',
                   '#004b87', '#84329b', '#963cbd', '#ce0037', '#808286', '#131313']
    }
    return seasonal_colors.get(season, [])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
def color_nonsuggestions_for_season(season):
    nonsuggestions = {
        'Spring': ['#819cab', '#5b5231', '#124193', '#c22b58', '#cc5632', '#a01e66'],
        'Summer': ['#9c693a', '#062d42', '#53285d', '#e26813', '#cc5632', '#d90e34'],
        'Autumn': ['#64bcc2', '#809caa', '#e5edf7', '#f3ca3a', '#ebb0b0', '#d21078'],
        'Winter': ['#b1d16e', '#bbdce3', '#767b41', '#e26813', '#ecb0b0', '#e49421'],
    }
    return nonsuggestions.get(season, [])

# ‡πÇ‡∏´‡∏•‡∏î Lottie Animation
lottie_animation = load_lottie_url("https://assets9.lottiefiles.com/packages/lf20_h4t3z0y7.json")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ Streamlit
st.title("üé® Colorista: Your Personal Color Consultant")
st.subheader("‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß!")

# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
if lottie_animation:
    st_lottie(lottie_animation, speed=1, height=200, key="upload")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", type=["jpg", "jpeg", "png"])
st.write("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏µ‡∏ú‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤")

if uploaded_file is not None:
    st.write("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...")

    image = np.array(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(image, 1)

    time.sleep(2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô

    st.image(image, channels="BGR", caption="‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")

    dominant_color = extract_dominant_color(image)

    if dominant_color is not None:
        st.write(f"üîç ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠: {dominant_color}")
        hex_color = f"#{dominant_color[0]:02X}{dominant_color[1]:02X}{dominant_color[2]:02X}"
        st.color_picker("‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô", value=hex_color)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        season = classify_seasonal_color(dominant_color)

        st.write(f"‚ú® ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {season}")
        st.write(outfit_suggestion(season))

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        st.write("üëó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡∏ß:")
        color_suggestions = color_suggestions_for_season(season)
        if color_suggestions:
            cols = st.columns(len(color_suggestions))
            for i, color in enumerate(color_suggestions):
                with cols[i]:
                    st.markdown(f"<div style='width:50px; height:50px; background-color:{color};'></div>", unsafe_allow_html=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á
        st.write("üö´ ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á:")

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
        color_nonsuggestions = color_nonsuggestions_for_season(season)

        if color_nonsuggestions:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô color_nonsuggestions
            cols_nonsug = st.columns(len(color_nonsuggestions))

            # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            for i, color in enumerate(color_nonsuggestions):
                with cols_nonsug[i]:
                    # ‡πÉ‡∏ä‡πâ markdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                    st.markdown(
                        f"""
                        <div style='width:50px; height:50px; background-color:{color}; margin-right: 10px; margin-bottom: 10px;'></div>
                        """,
                        unsafe_allow_html=True
                    )


